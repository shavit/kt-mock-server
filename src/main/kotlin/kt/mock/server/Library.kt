/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package kt.mock.server

import okhttp3.mockwebserver.Dispatcher
import okhttp3.mockwebserver.MockResponse
import okhttp3.mockwebserver.MockWebServer
import okhttp3.mockwebserver.RecordedRequest
import okhttp3.HttpUrl

class Library(port: Int = 3000) {


    final private val AUTH_NEW = "{\"uid\": \"\", \"access_token\": \"\", \"refresh_token\": \"\"}"
    final private val AUTH_SUCCESS = "{\"access_token\": \"\", \"refresh_token\": \"\"}"

    private val port: Int = port
    private val srv: MockWebServer

    init {
	this.srv = MockWebServer()
	
	val dispatcher = object : Dispatcher() {
	    @Throws(InterruptedException::class)
	    override fun dispatch(request: RecordedRequest): MockResponse {	
		val res = MockResponse()

		when(request.path) {
		    "/auth" -> return res.setResponseCode(200).setBody(AUTH_SUCCESS)
		    "/auth/new" -> return res.setResponseCode(200).setBody(AUTH_NEW)
		    else -> return res.setResponseCode(404).setBody("not found")
		}
	    }
	}

	this.srv.dispatcher = dispatcher
    }

    // fun route(path: String, respBody: String): Library {
    // 	this.srv.enqueue(MockResponse().setBody(respBody))
	    
    // 	return this
    // }

    fun getUrl(path: String): HttpUrl {
	return srv.url(path)
    }

    fun start(){
	this.srv.start()
    }
    fun shutdown(){
	this.srv.shutdown()
    }
}
